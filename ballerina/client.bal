// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# API to create and manage various types of loans such as personal, commercial, mortgage, line of credit, etc
public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig apiKeyConfig;
    # Gets invoked to initialize the `connector`.
    #
    # + apiKeyConfig - API keys for authorization 
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ApiKeysConfig apiKeyConfig, ConnectionConfig config =  {}, string serviceUrl = "https://api.temenos.com/api/v9.0.0//holdings") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
        self.apiKeyConfig = apiKeyConfig.cloneReadOnly();
    }

    # Creates a business banking loan for a single or joint customer
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createBNPLLoanResponse 
    resource isolated function post loans/buyNowPayLater(http:Request request, CreateBNPLLoanHeaders headers = {}, *CreateBNPLLoanQueries queries) returns BNPLLoanResponse|error {
        string resourcePath = string `/loans/buyNowPayLater`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Retrieve the buy now pay later loan details
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - LoanInformationResponse 
    resource isolated function get loans/balances(GetLoanInformationHeaders headers = {}, *GetLoanInformationQueries queries) returns LoanInformationResponse|error {
        string resourcePath = string `/loans/balances`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Performs the loan cancellation for buy now pay later service
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - cancelArrangementResponse 
    resource isolated function put loans/[string loanId]/cancellations(http:Request request, CancelArrangementHeaders headers = {}, *CancelArrangementQueries queries) returns ArrangementResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/cancellations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Creates the creation of consumer loan for the given product
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createConsumerLoanResponse 
    resource isolated function post loans/consumerLoans(http:Request request, CreateConsumerLoanHeaders headers = {}, *CreateConsumerLoanQueries queries) returns ConsumerLoanResponse|error {
        string resourcePath = string `/loans/consumerLoans`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Creates the creation of consumer loan for the given product
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createpersonalLoansResponse 
    resource isolated function post loans/personalLoans(http:Request request, CreatepersonalLoansHeaders headers = {}, *CreatepersonalLoansQueries queries) returns ConsumerLoanResponse|error {
        string resourcePath = string `/loans/personalLoans`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Creates the creation of consumer loan for the given product
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createvehicleLoanResponse 
    resource isolated function post loans/vehicleLoans(http:Request request, CreatevehicleLoanHeaders headers = {}, *CreatevehicleLoanQueries queries) returns ConsumerLoanResponse|error {
        string resourcePath = string `/loans/vehicleLoans`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Creates a loan for the given product
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoansResponse 
    resource isolated function post loans(http:Request request, CreateLoansHeaders headers = {}, *CreateLoansQueries queries) returns ConsumerLoanResponse|error {
        string resourcePath = string `/loans`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Retrieves payment holiday simulate details for the loan
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - PaymentHolidaySimResponse 
    resource isolated function get loans/[string loanId]/simulations/paymentHolidays(GetPaymentHolidaySimHeaders headers = {}, *GetPaymentHolidaySimQueries queries) returns PaymentHolidaySimResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/simulations/paymentHolidays`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Simulate payment holiday activity for a loan account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - simulatePaymentHolidayResponse 
    resource isolated function post loans/[string loanId]/simulations/paymentHolidays(http:Request request, SimulatePaymentHolidayHeaders headers = {}, *SimulatePaymentHolidayQueries queries) returns PaymentHolidayResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/simulations/paymentHolidays`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Perform the renegotiation of the loan contract details
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateLoanConditionsResponse 
    resource isolated function put loans/[string loanId]/renegotiations(http:Request request, UpdateLoanConditionsHeaders headers = {}, *UpdateLoanConditionsQueries queries) returns LoanConditionsResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/renegotiations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update the account conditions of the loan
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateLoanAccountResponse 
    resource isolated function put loans/[string loanId]/accounts(http:Request request, UpdateLoanAccountHeaders headers = {}, *UpdateLoanAccountQueries queries) returns LoanAccountResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/accounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update the interest conditions of the loan
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateLoanInterestResponse 
    resource isolated function put loans/[string loanId]/interestConditions(http:Request request, UpdateLoanInterestHeaders headers = {}, *UpdateLoanInterestQueries queries) returns LoanInterestResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/interestConditions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Execute loan charge-off activity to charge-off account balance only
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createChargeOffActivityResponse 
    resource isolated function put loans/[string loanId]/chargeOffs(http:Request request, CreateChargeOffActivityHeaders headers = {}, *CreateChargeOffActivityQueries queries) returns ChargeOffActivityResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/chargeOffs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Disburses the loan commitment amount
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoanDisbursementResponse 
    resource isolated function put loans/[string loanId]/disbursements(http:Request request, CreateLoanDisbursementHeaders headers = {}, *CreateLoanDisbursementQueries queries) returns LoanDisbursementResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/disbursements`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Updates the customer for the given loan contract
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateLoansCustomerResponse 
    resource isolated function put loans/[string loanId]/customers(http:Request request, UpdateLoansCustomerHeaders headers = {}, *UpdateLoansCustomerQueries queries) returns LoansCustomerResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/customers`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Increases the commitment amount of the given loan contract
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateLoanTopupAmountResponse 
    resource isolated function put loans/[string loanId]/commitmentIncreases(http:Request request, UpdateLoanTopupAmountHeaders headers = {}, *UpdateLoanTopupAmountQueries queries) returns LoanTopupAmountResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/commitmentIncreases`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Decreases the commitment amount of the given loan contract
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateLoanDecreaseAmountResponse 
    resource isolated function put loans/[string loanId]/commitmentDecreases(http:Request request, UpdateLoanDecreaseAmountHeaders headers = {}, *UpdateLoanDecreaseAmountQueries queries) returns LoanDecreaseAmountResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/commitmentDecreases`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform repayment date change for the loan
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateRepaymentDateResponse 
    resource isolated function put loans/[string loanId]/repaymentDates(http:Request request, UpdateRepaymentDateHeaders headers = {}, *UpdateRepaymentDateQueries queries) returns RepaymentDateResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/repaymentDates`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform a loan balance write off
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - initiateWriteOffBalanceLoansResponse 
    resource isolated function put loans/[string loanId]/writeOffs/balances(http:Request request, InitiateWriteOffBalanceLoansHeaders headers = {}, *InitiateWriteOffBalanceLoansQueries queries) returns WriteOffBalanceLoansResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/writeOffs/balances`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform a loan write off of balances and bills
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - initiateWriteOffLoansResponse 
    resource isolated function put loans/[string loanId]/writeOffs(http:Request request, InitiateWriteOffLoansHeaders headers = {}, *InitiateWriteOffLoansQueries queries) returns WriteOffLoansResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/writeOffs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform a write off bills of unpaid loans
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - initiateWriteOffBillLoansResponse 
    resource isolated function put loans/[string loanId]/writeOffs/bills(http:Request request, InitiateWriteOffBillLoansHeaders headers = {}, *InitiateWriteOffBillLoansQueries queries) returns WriteOffBillLoansResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/writeOffs/bills`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Create a personal loan account with linked rate
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLinkedRateLoanResponse 
    resource isolated function post loans/linkedRateLoans(http:Request request, CreateLinkedRateLoanHeaders headers = {}, *CreateLinkedRateLoanQueries queries) returns LinkedRateLoanResponse|error {
        string resourcePath = string `/loans/linkedRateLoans`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a commercial or business account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createCommercialLoanResponse 
    resource isolated function post loans/commercialLoans(http:Request request, CreateCommercialLoanHeaders headers = {}, *CreateCommercialLoanQueries queries) returns CommercialLoanResponse|error {
        string resourcePath = string `/loans/commercialLoans`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a mortgage loan
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createMortgageResponse 
    resource isolated function post loans/mortgages(http:Request request, CreateMortgageHeaders headers = {}, *CreateMortgageQueries queries) returns MortgageResponse|error {
        string resourcePath = string `/loans/mortgages`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a lines of credit account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createCreditLineResponse 
    resource isolated function post loans/creditLines(http:Request request, CreateCreditLineHeaders headers = {}, *CreateCreditLineQueries queries) returns ConsumerLoanResponse|error {
        string resourcePath = string `/loans/creditLines`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create an installment loan for the given product
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createInstallmentLoanResponse 
    resource isolated function post facilities/installmentLoans(http:Request request, CreateInstallmentLoanHeaders headers = {}, *CreateInstallmentLoanQueries queries) returns InstallmentLoanResponse|error {
        string resourcePath = string `/facilities/installmentLoans`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create an account transfer
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + request - body Payload 
    # + return - FundsTransferResponse 
    # 
    # # Deprecated
    @deprecated
    resource isolated function post fundsTransfer(http:Request request, CreateFundsTransferHeaders headers = {}, *CreateFundsTransferQueries queries) returns FundsTransferResponse|error {
        string resourcePath = string `/fundsTransfer`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Retrieves the outstanding amount to be paid for the given loan
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - LoanOutstandingBillsResponse 
    resource isolated function get loans/[string loanId]/outstandingBills(GetLoanOutstandingBillsHeaders headers = {}, *GetLoanOutstandingBillsQueries queries) returns LoanOutstandingBillsResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/outstandingBills`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves the payoff details of the given loan
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - LoanPayoffDetailsResponse 
    resource isolated function get loans/[string loanId]/payoffCalculations(GetLoanPayoffDetailsHeaders headers = {}, *GetLoanPayoffDetailsQueries queries) returns LoanPayoffDetailsResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/payoffCalculations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves the status of the given loan
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - ArrangementDetailsResponse 
    resource isolated function get loans/[string loanId]/status(GetArrangementDetailsHeaders headers = {}, *GetArrangementDetailsQueries queries) returns ArrangementDetailsResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/status`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves the status of the given activity 
    #
    # + arrangementActivityId - Contains the arrangement activity reference identifier
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - ExternalEventStatusResponse 
    resource isolated function get loans/arrangements/activities/[string arrangementActivityId]/status(GetExternalEventStatusHeaders headers = {}, *GetExternalEventStatusQueries queries) returns ExternalEventStatusResponse|error {
        string resourcePath = string `/loans/arrangements/activities/${getEncodedUri(arrangementActivityId)}/status`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves payment schedules details
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - PaymentSchedulesProjectionResponse 
    resource isolated function get loans/[string loanId]/schedules(GetPaymentSchedulesProjectionHeaders headers = {}, *GetPaymentSchedulesProjectionQueries queries) returns PaymentSchedulesProjectionResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/schedules`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves loan details 
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - LoanOverviewResponse 
    resource isolated function get loans/[string loanId]/loanDetails(GetLoanOverviewHeaders headers = {}, *GetLoanOverviewQueries queries) returns LoanOverviewResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/loanDetails`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves loan bills details
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - LoanBillsResponse 
    resource isolated function get loans/[string loanId]/bills(GetLoanBillsHeaders headers = {}, *GetLoanBillsQueries queries) returns LoanBillsResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/bills`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves loan collateral details
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - LoanCollateralsResponse 
    resource isolated function get loans/[string loanId]/collaterals(GetLoanCollateralsHeaders headers = {}, *GetLoanCollateralsQueries queries) returns LoanCollateralsResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/collaterals`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves the loan account details
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - LoanDetailsResponse 
    # 
    # # Deprecated
    @deprecated
    resource isolated function get loans/[string loanId](GetLoanDetailsHeaders headers = {}, *GetLoanDetailsQueries queries) returns LoanDetailsResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves payment schedules details
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - PaymentSchedulesResponse 
    # 
    # # Deprecated
    @deprecated
    resource isolated function get loans/[string loanId]/schedulePaymentFrequencies(GetPaymentSchedulesHeaders headers = {}, *GetPaymentSchedulesQueries queries) returns PaymentSchedulesResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/schedulePaymentFrequencies`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Simulate payoff calculate activity for a loan arrangement
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createSimulationCapturesResponse 
    resource isolated function post simulationCapture/[string arrangementId](http:Request request, CreateSimulationCapturesHeaders headers = {}, *CreateSimulationCapturesQueries queries) returns SimulationCapturesResponse|error {
        string resourcePath = string `/simulationCapture/${getEncodedUri(arrangementId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create simulation for loan products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoanSimulationResponse 
    resource isolated function post loans/simulations(http:Request request, CreateLoanSimulationHeaders headers = {}, *CreateLoanSimulationQueries queries) returns LoanSimulationResponse|error {
        string resourcePath = string `/loans/simulations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Update a simulation for loan products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateLoanSimulationResponse 
    resource isolated function put loans/simulations/[string simulationId](http:Request request, UpdateLoanSimulationHeaders headers = {}, *UpdateLoanSimulationQueries queries) returns LoanSimulationResponse1|error {
        string resourcePath = string `/loans/simulations/${getEncodedUri(simulationId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Create simulation payoff activity for loan products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoanPayoffSimulationResponse 
    resource isolated function post loans/[string loanId]/simulations/payoffs(http:Request request, CreateLoanPayoffSimulationHeaders headers = {}, *CreateLoanPayoffSimulationQueries queries) returns LoanPayoffSimulationResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/simulations/payoffs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Execute payoff activity for loan products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoanArrangementPayoffResponse 
    resource isolated function post loans/[string loanId]/payoffs(http:Request request, CreateLoanArrangementPayoffHeaders headers = {}, *CreateLoanArrangementPayoffQueries queries) returns LoanArrangementPayoffResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/payoffs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Retrieves overpayment details that has happened for a loan arrangement
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OverpaymentDetailsResponse 
    resource isolated function get loans/[string loanId]/overpayments(GetOverpaymentDetailsHeaders headers = {}, *GetOverpaymentDetailsQueries queries) returns OverpaymentDetailsResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/overpayments`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Creates a new drawdown offer for the required customer.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoanDrawdownOfferResponse 
    resource isolated function post loans/drawdowns/offers(http:Request request, CreateLoanDrawdownOfferHeaders headers = {}, *CreateLoanDrawdownOfferQueries queries) returns LoanDrawdownOfferResponse|error {
        string resourcePath = string `/loans/drawdowns/offers`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Accept the offer drawdown for the retail loan and convert offer drawdown into a live loan arrangement.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoanDrawdownOfferAcceptanceResponse 
    resource isolated function post loans/[string loanId]/drawdowns/acceptances(http:Request request, CreateLoanDrawdownOfferAcceptanceHeaders headers = {}, *CreateLoanDrawdownOfferAcceptanceQueries queries) returns LoanDrawdownOfferAcceptanceResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/drawdowns/acceptances`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Renegotiate the offer drawdown for the required customer.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoanDrawdownOfferRenegotiationResponse 
    resource isolated function post loans/[string loanId]/drawdowns/renegotiations(http:Request request, CreateLoanDrawdownOfferRenegotiationHeaders headers = {}, *CreateLoanDrawdownOfferRenegotiationQueries queries) returns LoanDrawdownOfferRenegotiationResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/drawdowns/renegotiations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Cancellation of offer drawdown for the required customer.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - cancelLoanDrawdownOfferResponse 
    resource isolated function post loans/[string loanId]/drawdowns/cancellations(http:Request request, CancelLoanDrawdownOfferHeaders headers = {}, *CancelLoanDrawdownOfferQueries queries) returns LoanDrawdownOfferResponse1|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/drawdowns/cancellations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Accept the offer drawdown for the retail loan and convert offer drawdown into a live loan arrangement and retrieve the payment schedule details.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoanDrawdownOfferAcceptanceSchedulesResponse 
    resource isolated function post loans/[string loanId]/drawdowns/acceptances/schedules(http:Request request, CreateLoanDrawdownOfferAcceptanceSchedulesHeaders headers = {}, *CreateLoanDrawdownOfferAcceptanceSchedulesQueries queries) returns LoanDrawdownOfferAcceptanceResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/drawdowns/acceptances/schedules`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Renegotiate the offer drawdown for the required customer and retrieve the payment schedule details.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoanDrawdownOfferRenegotiationSchedulesResponse 
    resource isolated function post loans/[string loanId]/drawdowns/renegotiations/schedules(http:Request request, CreateLoanDrawdownOfferRenegotiationSchedulesHeaders headers = {}, *CreateLoanDrawdownOfferRenegotiationSchedulesQueries queries) returns LoanDrawdownOfferRenegotiationResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/drawdowns/renegotiations/schedules`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Updates the settlement condition of the loan
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateLoanSettlementResponse 
    resource isolated function put loans/[string loanId]/settlements(http:Request request, UpdateLoanSettlementHeaders headers = {}, *UpdateLoanSettlementQueries queries) returns LoanSettlementResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/settlements`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Simulate  the loan pre payment
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createRepaymentSimulationResponse 
    resource isolated function post loans/[string loanId]/simulations/repayments(http:Request request, CreateRepaymentSimulationHeaders headers = {}, *CreateRepaymentSimulationQueries queries) returns RepaymentSimulationResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/simulations/repayments`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Simulate the pre payment of the given loan amount and retrieve the payment schedule
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createRepaymentScheduleResponse 
    resource isolated function post loans/[string loanId]/simulations/repayments/schedules(http:Request request, CreateRepaymentScheduleHeaders headers = {}, *CreateRepaymentScheduleQueries queries) returns RepaymentSimulationResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/simulations/repayments/schedules`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Perform repayment date change for the loan and retrieve the payment schedule details.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateRepaymentDateAndSchedulesResponse 
    resource isolated function put loans/[string loanId]/repaymentDates/schedules(http:Request request, UpdateRepaymentDateAndSchedulesHeaders headers = {}, *UpdateRepaymentDateAndSchedulesQueries queries) returns RepaymentSimulationResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/repaymentDates/schedules`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Simulate a loan arrangement for the given payment date
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createRepaymentDateChangeSimulationResponse 
    resource isolated function post loans/[string loanId]/simulations/repaymentDates(http:Request request, CreateRepaymentDateChangeSimulationHeaders headers = {}, *CreateRepaymentDateChangeSimulationQueries queries) returns RepaymentDateChangeSimulationResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/simulations/repaymentDates`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Simulate a loan arrangement for the given payment date and retrieve the payments schedule details.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createRepaymentDateChangeSimulationSchedulesResponse 
    resource isolated function post loans/[string loanId]/simulations/repaymentDates/schedules(http:Request request, CreateRepaymentDateChangeSimulationSchedulesHeaders headers = {}, *CreateRepaymentDateChangeSimulationSchedulesQueries queries) returns RepaymentDateChangeSimulationSchedulesResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/simulations/repaymentDates/schedules`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Migration of legacy system loan contract to the given product
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - initiateTakeoverloanResponse 
    resource isolated function post loans/migrations(http:Request request, InitiateTakeoverloanHeaders headers = {}, *InitiateTakeoverloanQueries queries) returns TakeoverloanResponse|error {
        string resourcePath = string `/loans/migrations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Captures outstanding balance details of a contract migrated from legacy system
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateBalanceResponse 
    resource isolated function put loans/[string loanId]/balances/migrations(http:Request request, UpdateBalanceHeaders headers = {}, *UpdateBalanceQueries queries) returns BalanceResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/balances/migrations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Captures outstanding bill information of a contract migrated from legacy system.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateBillsResponse 
    resource isolated function put loans/[string loanId]/bills/migrations(http:Request request, UpdateBillsHeaders headers = {}, *UpdateBillsQueries queries) returns BillsResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/bills/migrations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Change of contract from one loan product to another
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateChangeProductResponse 
    resource isolated function put loans/[string loanId]/products(http:Request request, UpdateChangeProductHeaders headers = {}, *UpdateChangeProductQueries queries) returns ChangeProductResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/products`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Retrieves the covenants and conditions for a loan account.
    #
    # + loanId - Denotes the arrangement id of the loan
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - EvidenceResponse 
    resource isolated function get loans/[string loanId]/evidences(GetEvidenceHeaders headers = {}, *GetEvidenceQueries queries) returns EvidenceResponse1|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/evidences`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Update the covenants and conditions for a loan account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateEvidenceResponse 
    resource isolated function put loans/[string loanId]/evidences(http:Request request, UpdateEvidenceHeaders headers = {}, *UpdateEvidenceQueries queries) returns EvidenceResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/evidences`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Creates a business banking loan for a single customer or more than one customer(like a joint account relationship) with the customer identifier, customer role, loan currency details
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createBusinessLoanResponse 
    resource isolated function post loans/businessLoans(http:Request request, CreateBusinessLoanHeaders headers = {}, *CreateBusinessLoanQueries queries) returns BusinessLoanResponse|error {
        string resourcePath = string `/loans/businessLoans`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create auto simulation payoff activity for loan products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createLoanPayoffAutoSimulationResponse 
    resource isolated function post loans/[string loanId]/autoSimulations/payoffs(http:Request request, CreateLoanPayoffAutoSimulationHeaders headers = {}, *CreateLoanPayoffAutoSimulationQueries queries) returns LoanPayoffAutoSimulationResponse|error {
        string resourcePath = string `/loans/${getEncodedUri(loanId)}/autoSimulations/payoffs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create online simulation for loan products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createAutoSimulationsResponse 
    resource isolated function post loans/autoSimulations(http:Request request, CreateAutoSimulationsHeaders headers = {}, *CreateAutoSimulationsQueries queries) returns AutoSimulationsResponse|error {
        string resourcePath = string `/loans/autoSimulations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }
}
